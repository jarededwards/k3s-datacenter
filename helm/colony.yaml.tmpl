apiVersion: v1
kind: Namespace
metadata:
  name: tink-system
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: colony
  namespace: tink-system
spec:
  repo: https://charts.konstruct.io
  chart: colony
  targetNamespace: tink-system
  version: 0.1.0
  valuesContent: |-
    colony-agent:
      extraEnv:
        COLONY_API_URL: https://colony-api-virtual.konstruct.io
        LOAD_BALANCER: {{ .LoadBalancerIP }}
        TALOS_URL_FILES_SOURCE: http://{{ .LoadBalancerIP }}:8080
      extraEnvSecrets:
        API_TOKEN:
          key: api-key
          name: colony-api
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: tink-stack
  namespace: tink-system
spec:
  chart: oci://ghcr.io/tinkerbell/charts/stack
  targetNamespace: tink-system
  version: 0.4.4
  valuesContent: |-
    # 0.5.0 required for global.
    # global:
    #   # publicIP is used to set what both smee.publicIP and stack.loadBalancerIP do individually.
    #   publicIP: {{ .LoadBalancerIP }}
    hegel:
      trustedProxies:
      - 10.42.0.0/24
    smee:
      publicIP: {{ .LoadBalancerIP }}
      image: public.ecr.aws/kubefirst/smee:9371956
      trustedProxies:
      - 10.42.0.0/24
      tftp:
        timeout: 120s
      additionalArgs:
        - -dhcp-auto-discovery=true
        - -dhcp-mode=proxy
    stack:
      loadBalancerIP: {{ .LoadBalancerIP }}
      kubevip:
        interface: {{ .LoadBalancerInterface }}
      relay:
        sourceInterface: {{ .LoadBalancerInterface }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: download-image
  namespace: tink-system
data:
  entrypoint.sh: |-
    #!/usr/bin/env bash
    # This script is designed to download a cloud image file (.img) and then convert it to a .raw.gz file.
    # This is purpose built so non-raw cloud image files can be used with the "image2disk" action.
    # See https://artifacthub.io/packages/tbaction/tinkerbell-community/image2disk.
    set -euxo pipefail
    if ! which pigz qemu-img &>/dev/null; then
    	apk add --update pigz qemu-img
    fi
    image_url=$1
    file=$2/${image_url##*/}
    file=${file%.*}.raw.gz
    if [[ ! -f "$file" ]]; then
    	wget "$image_url" -O image.img
    	qemu-img convert -O raw image.img image.raw
    	pigz <image.raw >"$file"
    	rm -f image.img image.raw
    fi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: download-ubuntu-jammy
  namespace: tink-system
spec:
  template:
    spec:
      containers:
        - name: download-ubuntu-jammy
          image: bash:5.2.2
          command: ["/script/entrypoint.sh"]
          args:
            [
              "https://cloud-images.ubuntu.com/daily/server/jammy/current/jammy-server-cloudimg-amd64.img",
              "/output",
            ]
          volumeMounts:
            - mountPath: /output
              name: hook-artifacts
            - mountPath: /script
              name: configmap-volume
      restartPolicy: OnFailure
      volumes:
        - name: hook-artifacts
          hostPath:
            path: /opt/hook
            type: DirectoryOrCreate
        - name: configmap-volume
          configMap:
            defaultMode: 0700
            name: download-image
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: download-talos-files
  namespace: tink-system
data:
  entrypoint.sh: |-
    #!/usr/bin/env bash
    # This script is designed to download specific Talos files required for an IPXE script to work.
    set -euxo pipefail
    if ! which wget &>/dev/null; then
      apk add --update wget
    fi
    base_url=$1
    output_dir=$2
    files=("initramfs-amd64.xz" "vmlinuz-amd64")
    for file in "${files[@]}"; do
      wget "${base_url}/${file}" -O "${output_dir}/${file}"
    done
---
apiVersion: batch/v1
kind: Job
metadata:
  name: download-talos-files
  namespace: tink-system
spec:
  template:
    spec:
      containers:
        - name: download-talos-files
          image: bash:5.2.2
          command: ["/script/entrypoint.sh"]
          args:
            [
              "https://github.com/siderolabs/talos/releases/download/v1.8.0",
              "/output",
            ]
          volumeMounts:
            - mountPath: /output
              name: hook-artifacts
            - mountPath: /script
              name: configmap-volume
      restartPolicy: OnFailure
      volumes:
        - name: hook-artifacts
          hostPath:
            path: /opt/hook
            type: DirectoryOrCreate
        - name: configmap-volume
          configMap:
            defaultMode: 0700
            name: download-talos-files
